import com.android.ide.common.signing.KeystoreHelper
import org.apache.commons.codec.digest.DigestUtils

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

Properties properties = new Properties()
File localPropFile = project.rootProject.file("local.properties")
if (localPropFile.exists()) {
    properties.load(localPropFile.newDataInputStream())
}

android {
    compileSdk 33
    buildToolsVersion '33.0.0'
    namespace "rikka.safetynetchecker"

    if (properties.getProperty("storeFile") != null) {
        signingConfigs {
            debug {
                storeFile file(properties.getProperty("storeFile"))
                storePassword properties.getProperty("storePassword")
                keyAlias properties.getProperty("keyAlias")
                keyPassword properties.getProperty("keyPassword")
            }
        }
    }

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode version_code
        versionName version_name
        buildConfigField "String[]", "API_KEY", "{\"${properties.getProperty("apiKey", "")}\"}"
        buildConfigField "String", "SAMPLE", "\"${property("sampleResult")}\""
        try {
            def info = KeystoreHelper.getCertificateInfo(
                    signingConfigs.debug.storeType,
                    signingConfigs.debug.storeFile,
                    signingConfigs.debug.storePassword,
                    signingConfigs.debug.keyPassword,
                    signingConfigs.debug.keyAlias
            )
            def digest = Base64.encoder.encodeToString(DigestUtils.sha256(info.certificate.encoded))
            buildConfigField "String", "certificateDigest", "\"$digest\""
        } catch (Exception ignored) {
            printf("./gradlew :app:validateSigningDebug")
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.2.0"
    }
    packagingOptions {
        resources {
            excludes += '**'
        }
    }
    dependenciesInfo {
        includeInApk false
    }
    lint {
        checkReleaseBuilds false
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "yasnac-${variant.versionName}-${variant.name}.apk"
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.activity:activity-compose:1.5.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.0'

    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    implementation "com.google.accompanist:accompanist-insets-ui:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"

    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation('com.google.http-client:google-http-client-android:1.42.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3'

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.material:material-icons-extended:$compose_version"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

configurations.all {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
}
